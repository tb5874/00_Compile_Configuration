출처 : https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#c-language-extensions

B. C++ Language Extensions
[용어]
__global__
__device__
__host__
__device__ __host__
(어디서 수행되는지 or 어디서 호출하지 생각하면 이해가 쉽다.)
(device : GPU = 실제 그래픽 카드 = gtx 1080 )
(host : 컴퓨터 )

[함수 일 때]
__global__
일반 함수처럼 컴퓨터가 호출 가능, 수행은 device에서 함
device 에서 호출이 가능하긴 한데 compute capability 3.2 이상이면 된다고 함
(참조 : CUDA Dynamic Parallelism for more details).
클래스에 포함 될 수 없음
리턴은 항상 void 형태여야 함
B.32. Execution Configuration 형식에 맞게 호출해야 함
즉, device에서 수행되는 함수에 사용되는 block과 grid의 차원을 넣어줘야 함
<<< Dg, Db, Ns, S >>> 형태로 쓰임
자세한 설명 : https://www.sysnet.pe.kr/2/0/11481

Dg 는 dim3
unsigned int, (x,y,z) 3개의 변수를 지니는 구조체다
This type is an integer vector type based on uint3 that is used to specify dimensions.
When defining a variable of type dim3, any component left unspecified is initialized to 1.
Dg 는 block의 수,
Db 는 thread의 수를 뜻함

///////////////////////////////////////////////////////////////////////////////////////
Ex )
__global__ void udf_real_cuda_sum(int a, int b, int* c)
{
	int tid = blockIdx.x * blockDim.x + threadIdx.x;
	c[tid] = a + b;
}

int udc_cuda_test::udf_cuda_sum(int a, int b, int* c)
{
	int* f;
	cudaMalloc((void**)&f, sizeof(int) * 1);
	cudaMemcpy(f, c, sizeof(int)*1, cudaMemcpyHostToDevice);
	udf_real_cuda_sum <<<1, 1>>> (a, b, f);
	
	cudaMemcpy(c, f, sizeof(int) * 1, cudaMemcpyDeviceToHost);

	cudaFree(f);

	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////

static 변수 가질 수 없음
host와 device 간의 메모리 읽고 쓰기는 API 함수를 통해 일어나기 때문이라고 함 ( ? 무슨말인지 모르겠음 )
__global__ __host__와 같은 용법으로 쓰일 수 없음 ( ? 무슨말인지 모르겠음 )
공유 메모리를 이용하며 256 바이트까지의 인수를 사용할 수 있음 ( ? 무슨말인지 모르겠음 )
아래처럼 가변형 인수 int a, int b, int *f 가질 수 없음 ( ? 무슨 말인지 모르겠음 )
Ex )udf_real_cuda_sum <<<1, 1 >>> (int a, int b, int *f);

__device__
컴퓨터가 호출 불가, device만 호출 가능
즉, __global__ 로 선언된 함수 안에 작성해야 함
static 변수 가질 수 없음
가변형 인수 가질 수 없음 ( ? 무슨 말인지 모르겠음 )

__host__
일반적으로 작성하는 함수앞에 생략되어있다고 보면 됨
즉, 아래 두 함수는 같음
int main()
{
	return 0;
}

__host__ int main()
{
	return 0;
}

__device__ __host__
host와 device 양쪽에서 모두 사용할 수 있는 함수
하지만 host에서 호출하면 host가 연산하고
device가 호출하면 device가 연산한다.
host에서 호출했다고 device가 연산하는것은 아니다.




[변수 일 때]
__device__
전역변수처럼 할당됨.
프로그램이 종료될 때까지 유효함
모든 thread가 접근할 수 있고, 컴퓨터는 API 함수를 통해 읽기와 쓰기가 가능

